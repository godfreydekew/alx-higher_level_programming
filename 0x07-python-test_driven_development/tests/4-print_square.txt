# 4-print_square.txt

========================
Using 4-print_square.py
========================

Using the function ``print_square(size)``.

Usage
=====

The function prints a square with the # character.

First import from ``4-print_square`` file:

    >>> print_square = __import__('4-print_square').print_square

Square with size 1:

    >>> print_square(1)
    #
    
Square with size 3:

    >>> print_square(3)
    ###
    ###
    ###

Square with size 0 (empty square):

    >>> print_square(0)
    

Square with size 5:

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

Square with size 2:

    >>> print_square(2)
    ##
    ##
    
Square with size 7:

    >>> print_square(7)
    #######
    #######
    #######
    #######
    #######
    #######
    #######

Testing larger sizes:

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Testing a mix of integers and floats:

    >>> print_square(4.0)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

Testing a mix of positive and negative sizes:

    >>> print_square(-3)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

Testing for integer overflow:

    >>> print_square(10**20)
    # ... (output can be truncated for brevity)

Testing for float overflow:

    >>> print_square(1e100)
    # ... (output can be truncated for brevity)
