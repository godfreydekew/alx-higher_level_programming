#2-matrix_divided.txt

===========================
Using 2-matrix_divided.py
===========================

Using  function ``matrix_divided(matrix, div)``

The function returns a new matrix contining all elements of a `matrix`
divided by `div`.

First import the function from the 2-matrix_divided file:

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


Then start to use it:


	>>> matrix = [
 	...	[19, 4, 3],
	...	[4, 7, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[6.33, 1.33, 1.0], [1.33, 2.33, 2.0]]


The original matrix is left unchanged:

	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]

Exceptions
==========

==================
Invalid ``matrix``
==================

The ``matrix`` parameter must be  must be a list of lists of ints or floats.
Otherwise, a TypeError is raised:


	>>> matrix = "Godfrey"
	>>> print(matrix_divided(matrix, 4))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Every row of the ``matrix`` must have the same size:


	>>> matrix = [
	...	[1, 2, 4],
	...	[8, 9]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

======================
Invalid value of ``div``
=====================

The ``div`` must be an int or float.
Otherwise a TypeError is raised.


	>>> matrix = [
    	...     [1, 2, 3],
    	...     [4, 5, 6]
    	... ]
	>>> print(matrix_divided(matrix, "grit"))
	Traceback (most recent call last):
		...
	TypeError: div must be a number


``div`` canâ€™t be equal to 0, otherwise raise a ZeroDivisionError.


	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
