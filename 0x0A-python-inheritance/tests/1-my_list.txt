#1-my_list.txt

==================
Using 1-my_list.py
==================

This module defines ``MyList`` that inherits from ``list``

First import the module


    >>> Mylist = __import__('1-my_list').MyList

Then test it

First create object of ``MyList``

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

Print empty list

    >>> print(my_list)
    []

Initialize ``MyList``

    >>> my_list = MyList([3, 2, 1])
    >>> print(my_list)
    [3, 2, 1]

    >>> my_list = MyList(None)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not iterable

    >>> my_list = MyList([10, 2], [5, 7], [9, 8, 9, 6])
    Traceback (most recent call last):
        ...
    TypeError: list() takes at most 1 argument, got 3


=========
usage
=========

Since ``MyList`` inherited from ``list`` therefore at has
all methods in ``list``


    >>> my_list = MyList()
    >>> my_list.append(4)
    >>> my_list.append(5)
    >>> my_list.append(3)
    >>> print(my_list)
    [4, 5, 3]


    >>> my_list.remove(4)
    >>> print(my_list)
    [5, 3]


=======================
``print_sorted`` Method
=======================

A public instance method in the ``MyList`` class that prints the elements
of a list in a sorted ascending order.


Some info with the print method:


    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>


Calling the method with arguments raises an error:


    >>> my_list.print_sorted(0)
    Traceback (most recent call last):
        ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Proper Usage:


    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

NB: The original order of the list is not affected after calling the method:

    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list = MyList(["Abuja", "Calvin", "Benz"])
    >>> my_list.print_sorted()
    ['Abuja', 'Benz', 'Calvin']

List must contain elements of the same type, else a TypeError is raised:


    >>> my_list = MyList(["Godie", 2, 3, "Dekera"])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'int' and 'str'
